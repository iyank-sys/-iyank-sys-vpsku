#!/bin/bash 
# COLOR VALIDATION
clear
y='\033[1;33m' #yellow
l='\033[0;37m'
BGX="\033[42m"
CYAN="\033[96m"
z="\033[96m"
RED='\033[0;31m'
NC='\033[0m'
gray="\e[1;30m"
Blue="\033[0;34m"
green='\033[0;32m'
grenbo="\e[92;1m"
purple="\033[1;95m"
YELL='\033[0;33m'
#INTALLER-UDP
UDPX="https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1S3IE25v_fyUfCLslnujFBSBMNunDHDk2"
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
IPVPS=$(curl -s ipv4.icanhazip.com)
domain=$(cat /etc/xray/domain)
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d/%m/%Y')
TIMEZONE=$(printf '%(%H:%M:%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear
MYIP=$(curl -sS ipv4.icanhazip.com)
echo ""
#########################
# USERNAME
rm -f /usr/bin/user
username=$(curl -sS https://raw.githubusercontent.com/xssh99/reg/main/ip | grep $MYIP | awk '{print $2}')
echo "$username" >/usr/bin/user
# validity
rm -f /usr/bin/e
valid=$(curl -sS https://raw.githubusercontent.com/xssh99/reg/main/ip | grep $MYIP | awk '{print $3}')
echo "$valid" > /usr/bin/e
# DETAIL ORDER
username=$(cat /usr/bin/user)
oid=$(cat /usr/bin/ver)
exp=$(cat /usr/bin/e)
clear
# CERTIFICATE STATUS
d1=$(date -d "$valid" +%s)
d2=$(date -d "$today" +%s)
certifacate=$(((d1 - d2) / 86400))
# VPS Information
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}
mai="datediff "$Exp" "$DATE""

# Status ExpiRED Active | Geo Project
Info="(${green}Active${NC})"
Error="(${RED}Exp${NC})"
today=`date -d "0 days" +"%Y-%m-%d"`
Exp1=$(curl -sS https://raw.githubusercontent.com/xssh99/reg/main/ip | grep $MYIP | awk '{print $3}')
if [[ $today < $Exp1 ]]; then
sts="${Info}"
else
sts="${Error}"
fi
echo -e "\e[32mloading...\e[0m"
clear

# OS Uptime
uptime="$(uptime -p | cut -d " " -f 2-10)"
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${coREDiilik:-1}))"
cpu_usage+=" %"
WKT=$(curl -s ipinfo.io/timezone )
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date -R | cut -d " " -f -5)
IPVPS=$(curl -sS ipv4.icanhazip.com)
cname=$( awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
cores=$( awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo )
freq=$( awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
tram=$( free -m | awk 'NR==2 {print $2}' )
uram=$( free -m | awk 'NR==2 {print $3}' )
fram=$( free -m | awk 'NR==2 {print $4}' )
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
dropbear_service=$(/etc/init.d/dropbear status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status | Geo Project
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${green}ONLINE✅${NC}"
else
   status_ssh="${z}OFF${NC} "
fi

# // SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${green}ONLINE✅${NC}"
else
    status_ws_epro="${z}OFF${NC} "
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${green}ONLINE✅${NC}"
else
   status_haproxy="${z}OFF${NC} "
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${green}ONLINE✅${NC}"
else
   status_xray="${z}OFF${NC} "
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${green}ONLINE✅${NC}"
else
   status_nginx="${z}OFF${NC} "
fi

# STATUS SERVICE Dropbear
if [[ $dropbear_service == "running" ]]; then 
   status_dropbear="${green}ONLINE✅${NC}"
else
   status_dropbear="${z}OFF${NC} "
fi
#####
function fixhap() {
    REPO="https://raw.githubusercontent.com/myvpn1/vip/main/"
read -p " Input Your Domain : " -e domain
rm -fr /etc/xray/domain
echo "${domain}" > /etc/xray/domain
systemctl stop haproxy
systemctl stop nginx
wget -O /etc/haproxy/haproxy.cfg "${REPO}haproxy.cfg" >/dev/null 2>&1
wget -O /etc/nginx/conf.d/xray.conf "${REPO}xray.conf" >/dev/null 2>&1
sed -i "s/xxx/${domain}/g" /etc/haproxy/haproxy.cfg
sed -i "s/xxx/${domain}/g" /etc/nginx/conf.d/xray.conf
curl ${REPO}nginx.conf > /etc/nginx/nginx.conf

cat /etc/xray/xray.crt /etc/xray/xray.key | tee /etc/haproxy/hap.pem

systemctl restart nginx
systemctl restart haproxy
}

#Download/Upload today
dtoday="$(vnstat -i eth0 | grep "today" | awk '{print $2" "substr ($3, 1, 1)}')"
utoday="$(vnstat -i eth0 | grep "today" | awk '{print $5" "substr ($6, 1, 1)}')"
ttoday="$(vnstat -i eth0 | grep "today" | awk '{print $8" "substr ($9, 1, 1)}')"
#Download/Upload yesterday
dyest="$(vnstat -i eth0 | grep "yesterday" | awk '{print $2" "substr ($3, 1, 1)}')"
uyest="$(vnstat -i eth0 | grep "yesterday" | awk '{print $5" "substr ($6, 1, 1)}')"
tyest="$(vnstat -i eth0 | grep "yesterday" | awk '{print $8" "substr ($9, 1, 1)}')"
#Download/Upload current month
dmon="$(vnstat -i eth0 -m | grep "`date +"%b '%y"`" | awk '{print $3" "substr ($4, 1, 1)}')"
umon="$(vnstat -i eth0 -m | grep "`date +"%b '%y"`" | awk '{print $6" "substr ($7, 1, 1)}')"
tmon="$(vnstat -i eth0 -m | grep "`date +"%b '%y"`" | awk '{print $9" "substr ($10, 1, 1)}')"
DATE=`date -d "0 days" +"%Y-%m-%d"`
#####INFOAKUN
vlx=$(grep -c -E "^#& " "/etc/xray/config.json")
let vla=$vlx/2
vmc=$(grep -c -E "^### " "/etc/xray/config.json")
let vma=$vmc/2
ssh1="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
trx=$(grep -c -E "^#! " "/etc/xray/config.json")
let trb=$trx/2
ssx=$(grep -c -E "^#!# " "/etc/xray/config.json")
let ssa=$ssx/2
# // Checking Version Script
LocalVersion=$(cat /root/.versi)
Version=$(curl -sS https://raw.githubusercontent.com/bagusid93/sc3/main/version | awk '{print $1}')
if [ $LocalVersion = $Version ]; then
    echo -e ""
else
    echo -e "\e[1;33mNew version available.\e[0m Do you want to update? (\e[1;32my\e[0m/\e[1;31mn\e[0m)"
    echo -e "\e[1;34mUpdates included in version ${Version}:\e[0m"
    echo -e "\e[1;35m- Added noobzvpns menu\e[0m"
    echo -e "\e[1;35m- Added custom UDP user login feature\e[0m"
    read -r choice
    if [ "$choice" = "y" ]; then
        wget https://raw.githubusercontent.com/putrahss/cip/main/update.sh && chmod +x update.sh && ./update.sh
        rm /root/.versi
        echo "${Version}" > /root/.versi
        clear
        echo -e ""
        echo -e "\e[1;32mUpdate Script Success\e[0m"
        sleep 2
        menu
    elif [ "$choice" = "n" ]; then
        echo -e "\e[1;31mUpdate cancelled. Exiting...\e[0m"
        exit 0
    else
        echo -e "\e[1;31mInvalid choice. Exiting...\e[0m"
        exit 1
    fi
fi
# Set Warna
LURUS="\033[1;32m=\033[1;33m=\033[1;31m=\033[1;31m"
LURUS2="\033[1;32m=\033[1;33m=\033[1;31m=\033[1;31m"
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m"
NC="\033[0m" # No Color

# Informasi Server
echo -e ""
echo -e "                   ${PURPLE}Informasi Server${NC}                "
echo -e "${KIRI}➤ System OS     = ${MODEL}                             "
echo -e "${KIRI}➤ Core Cpu      = ${CORE}                               "
echo -e "${KIRI}➤ Server RAM    = ${uram}/${RAM} MB                   "
echo -e "${KIRI}➤ Uptime Server = ${SERONLINE}                         "
echo -e "${KIRI}➤ Domain        = ${domain}                             "
echo -e "${KIRI}➤ IP VPS        = ${IPVPS}                               "
echo -e "${KIRI}➤ ISP           = ${ISP}                                   "
echo -e "${KIRI}➤ City          = ${CITY}                                "
echo -e "${KIRI}➤ Cpu Usage     = ${cpu_usage}                        "
echo -e ""
# Set Warna
LURUS="\033[1;32m=\033[1;33m=\033[1;31m=\033[1;31m"
KANAN="\033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m"
KIRI="\033[1;32m>\033[1;33m>\033[1;31m>\033[1;31m"
NC="\033[0m" # No Color
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
PURPLE="\033[1;35m"

# ASCII Art Header
echo -e "${GREEN}
╔══════════════════════════════════════════════════════════╗
║                   ${PURPLE}Welcome to Andyyuda Tunneling${GREEN}          ║
║           ${PURPLE}Meski Susah Jangan Lupa Bersukur!${GREEN}              ║
║                        - by Andyyuda                     ║
╚══════════════════════════════════════════════════════════╝${NC}
"
echo -e "${purple}╔═══════════════════════════════════════════════════════════════╗${NC}"
echo -e "${purple}║${NC} SSH $green ➤${NC} $ssh1 ${NC}${purple}   ║${NC} VMESS $green ➤${NC} $vma ${NC}${purple}   ║${NC} VLESS $green ➤${NC} $vla ${NC}${purple}   ║${NC} TROJAN $green ➤${NC} $trb ${purple}   ║${NC}"
echo -e "${purple}╚═══════════════════════════════════════════════════════════════╝${NC}"
echo -e "${purple}╔═════════════════════════════════════════════════════════════════════╗${NC}"
echo -e "${purple}║${NC} NGINX: $status_nginx ${purple}║${NC} DROPBEAR: $status_dropbear ${purple}║${NC} HAPROXY: $status_haproxy ${purple}║${NC} ${green}  GOOD ${purple}  ║${NC}"
echo -e "${purple}╚═════════════════════════════════════════════════════════════════════╝${NC}"
# Main Menu
echo -e "${YELLOW}Please select an option:${NC}"
echo -e "  ${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}"
echo -e "  ${KIRI}${PURPLE}1. SSHWS${NC} - ${status_ssh}                 ${KIRI}${YELLOW}9. LIMIT SPEED${NC}"
echo -e "  ${KIRI}${PURPLE}2. VMESS${NC} - ${status_xray}                ${KIRI}${YELLOW}10. BACKUP/RESTORE${NC}"
echo -e "  ${KIRI}${PURPLE}3. VLESS${NC} - ${status_xray}                ${KIRI}${YELLOW}11. MENU LIMIT IP${NC}"
echo -e "  ${KIRI}${PURPLE}4. TROJAN${NC} - ${status_xray}               ${KIRI}${YELLOW}12. MENU Add Bot Telegram${NC}"
echo -e "  ${KIRI}${PURPLE}5. MENU SHADOW${NC} - ${status_xray}          ${KIRI}${YELLOW}13. CHANGE XRAY LIMIT${NC}"
echo -e "  ${KIRI}${PURPLE}6. MENU SYSTEM${NC}                     ${KIRI}${YELLOW}14. FIX HAPROXY${NC}"
echo -e "  ${KIRI}${PURPLE}7. Check Bandwidth${NC}                 ${KIRI}${YELLOW}15. MENU NOOBSVPN${NC}"
echo -e "  ${KIRI}${PURPLE}8. SPEEDTEST${NC}                       ${KIRI}${YELLOW}16. GANTI PW VPS${NC}"
echo -e "                                        ${KIRI}${YELLOW}17. Exit${NC}"
echo -e "  ${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${LURUS}${NC}"
# Warna
LURUS='\e[0m'     # Reset warna
RED='\e[91m'      # Warna merah
GREEN='\e[92m'    # Warna hijau
PURPLE='\e[95m'   # Warna ungu
NC='\e[0m'        # Reset warna


# Konten
VERSION_URL="https://raw.githubusercontent.com/bagusid93/sc3/main/version"

# Tarik versi dari GitHub
VERSION=$(curl -s "$VERSION_URL")

# Konten
version="$VERSION"
developer="Andyyuda"
script_id="$username"
script_status="$sts"
exp_script="$exp $certificate Days"

# Fungsi untuk membuat garis ungu
draw_line() {
    local length=50
    for (( i=0; i<$length; i++ )); do
        printf "${PURPLE}━${NC}"
    done
}

# Output
echo -e "${LURUS}┌─$(draw_line)─┐"
echo -e "${LURUS}│${NC}${RED} Version${NC}      ${LURUS}=${GREEN} $version "
echo -e "${LURUS}│${NC} Devoloper's   ${NC}=${GREEN} $developer "
echo -e "${LURUS}│${NC} ID${NC}            ${NC}=${GREEN} $script_id "
echo -e "${LURUS}│${NC} Script Status${NC}=${GREEN} $script_status "
echo -e "${LURUS}│${NC} Exp Script${NC}   ${NC}=${GREEN} $exp_script "
echo -e "${LURUS}└─$(draw_line)─┘"
read -p "Select menu : " opt
case $opt in
1)
  clear
  m-sshws
  ;;
2)
  clear
  m-vmess
  ;;
3)
  clear
  m-vless
  ;;
4)
  clear
  m-trojan
  ;;
5)
  clear
  m-ssws
  ;;
6)
  clear
  utility
  ;;
7)
  clear
  bw
  ;;
8)
  clear
  speedtest
  ;;
9)
  clear
  limitspeed
  ;;
10)
  clear
  menu-backup
  ;;
11)
  clear
  onoff
  ;;
12)
  clear
  add-bot-panel
  ;;
13)
  clear
  change-limit-xray
  ;;
14)
  clear
  fixhap
  ;;
15)
  clear
  m-noobzvpn
  ;;
16)
  clear
  passwd
  ;;
17)
  clear
  exit 0
  ;;
*)
  clear
  echo -e "${RED}Invalid option. Please select a valid menu.${NC}"
  ;;
esac
